<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Poopy
grav = 1;
hsp = 0;
vsp = 0;
jumpspeed = 12;
movespeed = 10;
tv = 10;
image_speed = 5;
key_right = 0;
key_left = 0;
key_jump = 0;
key_down = 0;
key_shift = 0;
key_down_release = 0;
grounded = false;
points = 0
mask_index = spr_player_mask;
FirstParticleSystem = part_system_create();
first_particle = part_type_create();
part_system_depth(FirstParticleSystem,-20);
part_type_shape(first_particle,pt_shape_explosion);
part_type_scale(first_particle,1,1);
part_type_size(first_particle,0.30,0.45,-.003,0);
part_type_color2(first_particle,c_orange,c_red);
part_type_alpha2(first_particle,1,0.75);
part_type_speed(first_particle,1,5,0,0);
//part_type_gravity(first_particle,0.02,180);
part_type_orientation(first_particle,0,359,0,0,true);
part_type_direction(first_particle,0,359,0,0);
part_type_life(first_particle,100,150);
part_type_blend(first_particle,true);
first_emitter = part_emitter_create(FirstParticleSystem);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(key_shift)
{
    playerGridX = x/CELL_WIDTH;
    playerGridY = y/CELL_WIDTH;
    for(var xx = -1; xx &lt;= 1; xx++){
       for(var yy = -1; yy &lt;= 1; yy++){
            if(tile_exists(global.grid[# playerGridX + xx, playerGridY + yy]))
            {
                var bg = 0;
                switch(tile_get_background(global.grid[# playerGridX + xx, playerGridY + yy]))
                {
                    case bg_rust1:{ bg = bg_clean;
                    if object_index ==(obj_rusty) points += 1
                    if object_index ==(obj_crusty) points += 1
                    part_emitter_region(FirstParticleSystem, first_emitter, x-150, x+150, y-150, y+150, ps_shape_ellipse, ps_distr_gaussian);
                    part_emitter_burst(FirstParticleSystem,first_emitter,first_particle,irandom(20));
                    if(!audio_is_playing(snd_rust)){
                        audio_play_sound(snd_rust, 0, 0);
                    }
                    } break;
                    case bg_rust2:{ bg = bg_rust1;
                    if object_index ==(obj_rusty) points += 1
                    if object_index ==(obj_crusty) points += 1
                    part_emitter_region(FirstParticleSystem, first_emitter, x-150, x+150, y-150, y+150, ps_shape_ellipse, ps_distr_gaussian);
                    part_emitter_burst(FirstParticleSystem,first_emitter,first_particle,irandom(20));
                    if(!audio_is_playing(snd_rust)){
                        audio_play_sound(snd_rust, 0, 0);
                    }
                    } break;
                    case bg_rust3:{ bg = bg_rust2;
                    if object_index ==(obj_rusty) points += 1
                    if object_index ==(obj_crusty) points += 1
                    part_emitter_region(FirstParticleSystem, first_emitter, x-150, x+150, y-150, y+150, ps_shape_ellipse, ps_distr_gaussian);
                    part_emitter_burst(FirstParticleSystem,first_emitter,first_particle,irandom(20));
                    if(!audio_is_playing(snd_rust)){
                        audio_play_sound(snd_rust, 0, 0);
                    }
                    } break;
                    default: bg = bg_clean; break;
                }
                tile_set_background(global.grid[# playerGridX + xx, playerGridY + yy],bg);
            }
       }
    }
}

move = key_left + key_right;
hsp = move * movespeed;

if (vsp &lt; tv) vsp += grav;
if  (key_down_release)
{
tv = 10
grav = 1
    if(vsp &gt; 10){
        vsp = 10;
    }
}
if (key_down)
{grav = 1.5
tv = 15}

if (grid_place_meeting(x,y+1)/*place_meeting(x,y+1,obj_wall)*/)
{
    vsp = 0;
    grounded = true;
}else{
    grounded = false;
}

if (key_jump)
{
    //if(!audio_is_playing(snd_liftoff)){
        audio_sound_pitch(snd_flap, random_range(0.5,1));
        audio_play_sound(snd_liftoff, 0, false);
    //}
    vsp = -jumpspeed;
}




if (grid_place_meeting(x,y+vsp)/*place_meeting(x,y+vsp,obj_wall)*/)
{
    while (!grid_place_meeting(x,y+sign(vsp))/*!place_meeting(x,y+sign(vsp),obj_wall)*/)
    {
    y =y+sign(vsp)
    }
vsp = 0
}
if (grid_place_meeting(x+hsp,y)/*place_meeting(x+hsp,y,obj_wall)*/)
{
    while (!grid_place_meeting(x+sign(hsp),y)/*!place_meeting(x+sign(hsp),y,obj_wall)*/)
    {
    x=x+sign(hsp)
    }
hsp = 0
}
x +=hsp;
y +=vsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
